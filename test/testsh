self=$(basename $0)
past=1
rv=0

if test "$1" = "-p"; then
	past=0
	shift
fi

test=$1
shift
testname=$(echo $test | sed 's \.test  ')

log=$(grep '^testsh log ' $test | sed 's,^testsh log ,,')
wrap=$(grep '^testsh wrap ' $test | sed 's,^testsh wrap ,,')

if test -z "$log"; then
	log=log
fi
if ! test -d $log; then
	mkdir $log
fi
cwd=$(pwd)
cd $log
shift

sed -n 's,^	> ,,p' ../${test} >${test}.sh

if test "$past" = "1"; then
	if test -e ${test}.out; then
		mv ${test}.out ${test}.past
	fi
fi

#echo "##teamcity[testStarted name='$testname' captureStandardOutput='true']"
$wrap $SHELL ${test}.sh >${test}.out 2>&1
rv=$?

if test $rv -ne 0; then
	cat ${test}.out

	if test "$pastout_schedule" != "parallel"; then
		#echo "##teamcity[testIgnored name='$testname' message='run in parallel, trying again in series']"
	#else
		if grep '^testsh mute$' ../${test}; then
			rv=0
			#echo "##teamcity[testIgnored name='$testname' message='test case muted']"
		#else
			#echo "##teamcity[testFailed name='$testname' message='exit code $rv']"
		fi
	fi

	echo "$self: error $rv in $pastout_schedule ${log}/${test}.out"
	echo "$self: test file ${cwd}/${test}"
	echo "$self: log file ${cwd}/${log}/${test}.out"
fi

if test "$past" = "1"; then
	if ! test -e ${test}.past; then touch ${test}.past; fi
fi

#echo "##teamcity[testFinished name='$testname']"
exit $rv
